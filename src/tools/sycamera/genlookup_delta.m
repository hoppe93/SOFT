%% Generate a lookup table for Pcyl
clear; clc;

hankel = @(x) besselk(5/3, x);

lbLower = 1e-6;     % Lower lambda_c/lambda bound
lbUpper = 1e2;      % Upper -- " --
lambda = logspace(log10(lbLower), log10(lbUpper), 100);

power=zeros(size(lambda));
for i=1:numel(lambda)
    power(i) = quadgk(hankel, lambda(i), inf);
end

n=num2str(numel(lambda));

%%

fid=fopen('pcyl_lookup.c','w');
fwrite(fid, ['/* This file was automatically generated by `genlookup.m` */',10,10]);
fwrite(fid, ['const int sycamera_pcyl_lookup_count = ',n,';',10]);
fwrite(fid, ['const double sycamera_pcyl_lookup_lambda[',n,'] = {',10]);
for i=1:numel(lambda)
    if mod(i,10) == 1
        fwrite(fid, 9);
    end
    
    % Write the number
    fwrite(fid, num2str(lambda(i),16));
    
    if i < numel(lambda)
        fwrite(fid, ',');
    end
    if mod(i,10) == 0
        fwrite(fid, 10);
    end
end

fwrite(fid, ['};',10,10]);

fwrite(fid, ['const double sycamera_pcyl_lookup_int[',n,'] = {',10]);
for i=1:numel(power)
    if mod(i,10) == 1
        fwrite(fid, 9);
    end
    
    % Write the number
    fwrite(fid, num2str(power(i),16));
    
    if i < numel(power)
        fwrite(fid, ',');
    end
    if mod(i,10) == 0
        fwrite(fid, 10);
    end
end

fwrite(fid, '};');
fclose(fid);
