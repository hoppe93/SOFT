%% Generate a lookup tables for modified Bessel functions
clear; clc;

resolution = 400;

func1 = @(x) x.^2.*besselk(1/3, x).^2;
func2 = @(x) x.^2.*besselk(2/3, x).^2;

xiLower = 1e-5;     % Lower omega/omega_c bound
xiUpper = 1e2;      % Upper -- " --
% The functions we integrate have nice asymptotic forms as they
% have limiting values as omega --> 0. This allows us to place an insanely
% small value at the start of the below array since interpolation between this
% and the next value (located orders of magnitude away) will still be good.
xi = [1e-12, logspace(log10(xiLower), log10(xiUpper), resolution-2) 1e10];

%%

tic;

power1=zeros(size(xi));
power2=zeros(size(xi));
for i=1:numel(xi)-1
    power1(i) = func1(xi(i));
    power2(i) = func2(xi(i));
end

power1(end) = 0;
power2(end) = 0;

n=num2str(numel(xi));

fid=fopen('pdist_spec_lookup.c','w');
fwrite(fid, ['/* This file was automatically generated by `genlookup_dist_spec.m` */',10,10]);
fwrite(fid, ['const int sycamera_pdist_spec_lookup_count = ',n,';',10]);
fwrite(fid, ['const double sycamera_pdist_spec_lookup_xi[',n,'] = {',10]);
for i=1:numel(xi)
    if mod(i,10) == 1
        fwrite(fid, 9);
    end
    
    % Write the number
    fwrite(fid, num2str(xi(i),16));
    
    if i < numel(xi)
        fwrite(fid, ',');
    end
    if mod(i,10) == 0
        fwrite(fid, 10);
    end
end

fwrite(fid, ['};',10,10]);

fwrite(fid, ['const double sycamera_pdist_spec_lookup_f1[',n,'] = {/* K_{1/3}(x)^2 */',10]);
for i=1:numel(power1)
    if mod(i,10) == 1
        fwrite(fid, 9);
    end
    
    % Write the number
    fwrite(fid, num2str(power1(i),16));
    
    if i < numel(power1)
        fwrite(fid, ',');
    end
    if mod(i,10) == 0
        fwrite(fid, 10);
    end
end
fwrite(fid, ['};',10,10]);

fwrite(fid, ['const double sycamera_pdist_spec_lookup_f2[',n,'] = {/* K_{2/3}(x)^2 */',10]);
for i=1:numel(power2)
    if mod(i,10) == 1
        fwrite(fid, 9);
    end
    
    % Write the number
    fwrite(fid, num2str(power2(i),16));
    
    if i < numel(power2)
        fwrite(fid, ',');
    end
    if mod(i,10) == 0
        fwrite(fid, 10);
    end
end
fwrite(fid, ['};',10,10]);

fclose(fid);

toc;
