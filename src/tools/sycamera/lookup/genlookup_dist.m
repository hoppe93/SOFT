%% Generate a lookup tables for modified Bessel functions
clear; clc;

resolution = 400;

func1 = @(x) x.^2.*besselk(1/3, x).^2;
func2 = @(x) x.^2.*besselk(2/3, x).^2;

lbLower = 1e-5;     % Lower omega/omega_c bound
lbUpper = 1e2;      % Upper -- " --
% The functions we integrate have nice asymptotic forms as they
% have limiting values as omega --> 0. This allows us to place an insanely
% small value at the start of the below array since interpolation between this
% and the next value (located orders of magnitude away) will still be good.
lambda = [1e-12, logspace(log10(lbLower), log10(lbUpper), resolution-2) 1e10];

tic;

power1=zeros(size(lambda));
power2=zeros(size(lambda));
for i=1:numel(lambda)-1
    power1(i) = quadgk(func1, lambda(i), inf);
    power2(i) = quadgk(func2, lambda(i), inf);
end

power1(end) = 0;
power2(end) = 0;

n=num2str(numel(lambda));

fid=fopen('pdist_lookup.c','w');
fwrite(fid, ['/* This file was automatically generated by `genlookup-dist.m` */',10,10]);
fwrite(fid, ['const int sycamera_pdist_lookup_count = ',n,';',10]);
fwrite(fid, ['const double sycamera_pdist_lookup_omega[',n,'] = {',10]);
for i=1:numel(lambda)
    if mod(i,10) == 1
        fwrite(fid, 9);
    end
    
    % Write the number
    fwrite(fid, num2str(lambda(i),16));
    
    if i < numel(lambda)
        fwrite(fid, ',');
    end
    if mod(i,10) == 0
        fwrite(fid, 10);
    end
end

fwrite(fid, ['};',10,10]);

fwrite(fid, ['const double sycamera_pdist_lookup_int1[',n,'] = {/* integral of x*K_{1/3}(x) */',10]);
for i=1:numel(power1)
    if mod(i,10) == 1
        fwrite(fid, 9);
    end
    
    % Write the number
    fwrite(fid, num2str(power1(i),16));
    
    if i < numel(power1)
        fwrite(fid, ',');
    end
    if mod(i,10) == 0
        fwrite(fid, 10);
    end
end
fwrite(fid, ['};',10,10]);

fwrite(fid, ['const double sycamera_pdist_lookup_int2[',n,'] = {/*integral of x*K_{2/3}(x)*/',10]);
for i=1:numel(power2)
    if mod(i,10) == 1
        fwrite(fid, 9);
    end
    
    % Write the number
    fwrite(fid, num2str(power2(i),16));
    
    if i < numel(power2)
        fwrite(fid, ',');
    end
    if mod(i,10) == 0
        fwrite(fid, 10);
    end
end
fwrite(fid, ['};',10,10]);

fclose(fid);

toc;
